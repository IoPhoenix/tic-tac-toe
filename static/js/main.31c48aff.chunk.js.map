{"version":3,"sources":["components/Square.js","components/Board.js","components/GameInfo.js","components/ListItem.js","helpers.js","Game.js","serviceWorker.js","index.js"],"names":["Square","props","className","isWinner","react_default","a","createElement","onClick","value","Board","renderSquare","i","location","winnerIndexes","includes","components_Square","key","squares","board","count","children","j","push","createBoard","GameInfo","_ref","status","moves","ListItem","moveLocation","moveNumber","isLast","description","_moveLocation","_moveLocation2","Object","slicedToArray","col","row","concat","calculateWinner","lines","length","_lines$i","b","c","winner","Game","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","history","state","slice","stepNumber","squaresCopy","isXNext","setState","goTo","Array","fill","_this2","current","result","map","currentHistory","array","components_ListItem","components_Board","components_GameInfo","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_Game_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31c48aff.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Square(props) {\n    let className = 'square pointer bg-white b--light-gray f4 tc fl ';\n    className += props.isWinner ? 'bw2' : 'ba';\n\n    return (\n        <button \n            className={className}\n            onClick={props.onClick}>{props.value}\n        </button>\n    );\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\n\n/* Board structure:\n<div className=\"board-row\">\n    {renderSquare(0, [1,1])}\n    {renderSquare(1, [2,1])}\n    {renderSquare(2, [3,1])}\n</div>\n<div className=\"board-row\">\n    {renderSquare(3, [1, 2])}\n    {renderSquare(4, [2, 2])}\n    {renderSquare(5, [3, 2])}\n</div>\n<div className=\"board-row\">\n    {renderSquare(6, [1, 3])}\n    {renderSquare(7, [2, 3])}\n    {renderSquare(8, [3, 3])}\n</div> */\n\nfunction Board(props) {\n\n    const renderSquare = (i, location) => {\n        const isWinner = props.winnerIndexes && props.winnerIndexes.includes(i);\n\n        // pass its current value to each Square\n        // 'X', 'O', or null for empty squares\n        return (\n            <Square\n                location={location}\n                isWinner={isWinner}\n                key={i}\n                value={props.squares[i]}\n                onClick={() => props.onClick(i)}\n            />\n        )\n    }\n\n\n    const createBoard = () => {\n        const board = [];\n        let count = 0;\n\n        // Outer loop to create parent\n        for (let i = 0; i < 3; i++) {\n            let children = [];\n\n            // Inner loop to create children\n            for (let j = 0; j < 3; j++) {\n                children.push(renderSquare(count, [j+1, i+1]));\n                count++;\n            }\n\n            // Create the parent and add the children\n            board.push(<div className=\"board-row\" key={i}>{children}</div>);\n        }\n\n        return board;\n    }\n\n    return (\n        <div className=\"board mr5\">\n            {createBoard()}\n        </div>\n    )\n}\n\nexport default Board;","import React from 'react';\n\nfunction GameInfo({status, moves}) {\n\n    return (\n        <div className=\"board-info\">\n            <div className=\"status mb3 fw5 f3\">{status}</div>\n            <ul className=\"game-info list\">\n                {moves}\n            </ul>\n        </div>\n    );\n}\n\nexport default GameInfo;\n","import React from 'react';\n\n\nfunction ListItem({moveLocation, moveNumber, isLast, onClick, description}) {\n\n  if (moveLocation) {\n    const [col, row] = moveLocation;\n    moveLocation = `(col #${col}, row #${row})`;\n  }\n\n  let className = 'move pointer grow bg-white ba b--light-gray f5 tc pa1';\n  if (isLast) className += ' fw6';\n\n  return (\n    <li className=\"mb2\" key={moveNumber}>\n      <button \n        className={className}\n        onClick={() => onClick(moveNumber)}>\n          {description} {moveLocation}\n      </button>\n    </li>\n  )\n}\n\nexport default ListItem;\n","export default function calculateWinner(squares) {\n    const lines = [\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6]\n    ]\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                winner: squares[a],\n                winnerIndexes: [a, b, c]\n            }\n        }\n    }\n    return null;\n}","import React from 'react';\nimport 'tachyons';\nimport Board from './components/Board';\nimport GameInfo from './components/GameInfo';\nimport ListItem from './components/ListItem';\nimport calculateWinner from './helpers';\nimport './Game.css';\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        history: [{\n          squares: Array(9).fill(null),\n          moveLocation: null\n        }],\n        isXNext: true,\n        stepNumber: 0\n    }\n  }\n\n    /* history: [\n      {\n        squares: [null, null, null,\n                null, null, null,\n                null, null, null],\n        moveLocation: null\n      },\n      {\n        squares: [null, null, 'null',\n                  null, 'X', null,\n                  null, null, null],\n        moveLocation: [2,2]\n      }\n        ...\n    ]\n    */ \n\n   handleClick = (i, location) => {\n     // throw away “future” history when we return back to past step:\n     const history = this.state.history.slice(0, this.state.stepNumber + 1);\n     const current = history[history.length - 1];\n     const squaresCopy = current.squares.slice();\n      \n      // prevent double click or game after winning:\n      if (calculateWinner(squaresCopy) || squaresCopy[i]) return;\n      \n      squaresCopy[i] = this.state.isXNext ? 'X' : '0';\n      this.setState({\n        history: history.concat([{\n          squares: squaresCopy,\n          moveLocation: location\n        }]),\n        isXNext: !this.state.isXNext,\n        stepNumber: history.length\n      });\n  }\n\n\n  goTo = (stepNumber) => {\n    this.setState({\n      history: this.state.history.slice(0, stepNumber + 1),\n      stepNumber: stepNumber,\n      isXNext: (stepNumber % 2) === 0\n    });\n  }\n\n  \n  render() {\n    const history = this.state.history;\n\n    // display board for current move number:\n    const current = history[this.state.stepNumber];\n\n    const result = calculateWinner(current.squares);\n\n    const winner = result && result.winner;\n\n    const moves = history.map((currentHistory, moveNumber, array) => {\n      const description = moveNumber ? 'Go to move #' + moveNumber : 'Game start';\n      const isLast = moveNumber === array.length - 1;\n\n      return <ListItem \n                moveLocation={currentHistory.moveLocation}\n                isLast={isLast}\n                key={moveNumber}\n                moveNumber={moveNumber} \n                description={description} \n                onClick={this.goTo} />\n    });\n\n    let status;\n    let winnerIndexes;\n    if (winner) {\n        status =  'Winner is ' + winner;\n        winnerIndexes = result.winnerIndexes;\n    } else {\n        if (this.state.stepNumber === 9) {\n          status = 'It\\'a draw!';  \n        } else {\n          status = `Next player: ${this.state.isXNext ? 'X' : '0'}`;\n        }\n    }\n\n    return (\n      <div className=\"game avenir flex mt5 ml5\">\n        <Board \n          winnerIndexes={winnerIndexes}\n          squares={current.squares}\n          onClick={this.handleClick}/>\n        <GameInfo \n          status={status}\n          moves={moves}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}